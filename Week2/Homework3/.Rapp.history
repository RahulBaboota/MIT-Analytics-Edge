sd(c(5,8,12))
which.min(c(4,1,6))
8*6
2^10
sd(c(5,8,12))
which.min(c(4,1,6))
load(".RData")
ls()
ls
ls()
moneyball
load(".RData")
loans = read.csv('loans.csv')
str(loans)
summary(loans)
table(loans$not.fully.paid)
s.na(pub.rec)
is.na(pub.rec)
is.na(loan$pub.rec)
is.na(loans$pub.rec)
count(is.na(loans$pub.rec))
missing = subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
str(missing)
loans_imputed = read.csv("loans_imputed.csv")
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
set.seed(144)
library(caTools)
spl = sample.split( data = loans , SplitRatio = 0.7 )
spl = sample.split( loans , SplitRatio = 0.7 )
Train = subset( loans , spl == TRUE )
Test = subset ( loans , spl == FALSE )
Model1 = glm( not.fully.paid ~ . , data = Train , family = binomial )
summary( Model1 )
predicted.risk = predict( Model1 , newdata = Test , type = response )
predicted.risk = predict( Model1 , newdata = Test , type = 'response' )
loans$predicted.risk = predicted.risk
str(loans)
table(test$not.fully.paid, test$predicted.risk > 0.5)
table(Test$not.fully.paid, Test$predicted.risk > 0.5)
loans = read.csv('loans.csv')
set.seed(144)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
Model1 = glm( not.fully.paid ~ . , data = Train , family = binomial )
library(caTools)
set.seed(144)
spl = sample.split( loans , SplitRatio = 0.7 )
Train = subset( loans , spl == TRUE )
Test = subset ( loans , spl == FALSE )
Model1 = glm( not.fully.paid ~ . , data = Train , family = binomial )
predicted.risk = predict( Model1 , newdata = Test , type = 'response' )
table(Test$not.fully.paid, Test$predicted.risk > 0.5)
library(ROCR)
pred = prediction(test$predicted.risk, test$not.fully.paid)
pred = prediction(Test$predicted.risk, Test$not.fully.paid)
as.numeric(performance(pred, "auc")@y.values)
predicted.risk
table(Test$not.fully.paid, predicted.risk > 0.5)
